@model Contaminants_Monitoring.ViewModels.MapRangeViewModel
@{
    ViewBag.Title = "Map";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    /* * {
        box-sizing: border-box;
    }

    body {
        background-color: #f1f1f1;
    }*/

    /*    #regForm {
        background-color: #ffffff;
        margin: 100px auto;
        font-family: Raleway;
        padding: 40px;
        width: 70%;
        min-width: 300px;
    }*/
    #regForm {
        width: 50%;
    }

    /* h1 {
        text-align: center;
    }*/

    input {
        padding: 10px;
        width: 100%;
        font-size: 17px;
        border: 1px solid #aaaaaa;
    }

        /* Mark input boxes that gets an error on validation: */
        input.invalid {
            background-color: #ffdddd;
        }

    select.invalid {
        border-color: red;
    }

    /* Hide all steps by default: */
    .tab {
        display: none;
    }

    button {
        background-color: #4CAF50;
        color: #ffffff;
        border: none;
        padding: 10px 20px;
        font-size: 17px;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    #prevBtn {
        background-color: #bbbbbb;
    }

    /* Make circles that indicate the steps of the form: */
    .step {
        height: 15px;
        width: 15px;
        margin: 0 2px;
        background-color: #bbbbbb;
        border: none;
        border-radius: 50%;
        display: inline-block;
        opacity: 0.5;
    }

        .step.active {
            opacity: 1;
        }

        /* Mark the steps that are finished and valid: */
        .step.finish {
            background-color: #4CAF50;
        }

    .editablePane input {
        background-color: white !important;
        color: gray;
        border: none;
        border-bottom: 1px solid lightgray;
        border-radius: 0 !important;
    }
</style>
<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            @Html.ActionLink("Home", "Index", "Home")
        </li>
        <li class="breadcrumb-item">
            @Html.ActionLink("Generated Samples", "AllSamples", "Generate")
        </li>
        <li class="breadcrumb-item active" aria-current="page">Distribution</li>
    </ol>
</nav>

<h3 style="padding-top: 20px; color: dimgray;">Samples Distribution</h3>

<hr />
@using (Html.BeginForm("Map", "Generate", FormMethod.Post, new { id = "regForm" }))
{
    @Html.AntiForgeryToken()
    if (!String.IsNullOrEmpty(ViewBag.Message))
    {
        <div class="row">
            <div class="col-md-12">
                <div class="alert alert-info alert-dismissible fade show">
                    <button type="button" class="close" data-dismiss="alert">×</button>
                    <strong>@ViewBag.Message</strong>
                </div>
            </div>
        </div>
    }
    if (!String.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="row">
            <div class="col-md-12">
                <div class="alert alert-danger alert-dismissible fade show">
                    <button type="button" class="close" data-dismiss="alert">×</button>
                    <strong>@ViewBag.ErrorMessage</strong>
                </div>
            </div>
        </div>
    }
    <div style="overflow:auto;">
        <div style="float:right;">
            <button type="button" id="prevBtn" onclick="nextPrev(-1)">Previous</button>
            <button type="button" id="nextBtn" onclick="nextPrev(1)">Next</button>
        </div>
    </div>
    <div class="tab">
        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group row">
                @Html.Label("Sampling Plan ", new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.DropDownListFor(m => m.selectedSamplingPlanId, new SelectList(Model.samplingPlans, "pkSamplingPlanId", "SamplingPlanCode"), "select", new { @class = "form-control", id = "planChosenId", name = "planname" })
                </div>
            </div>
            <div class="form-group row">
                @Html.Label("Governorate ", new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.DropDownListFor(m => m.selectedGovernorateId, new SelectList(Model.governorates, "pkGovernorateId", "GovernorateName"), "select", new { @class = "form-control", id = "GovChosenId", name = "govname" })
                </div>
            </div>
            <div class="form-group row">
                @Html.Label("Caza ", new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @Html.DropDownListFor(m => m.selectedCazaId, new SelectList(Model.cazas, "pkCazaId", "CazaName"), "select", new { @class = "form-control", id = "CazaChosenId", name = "cazaname" })
                </div>
            </div>
        </div>
    </div>
    <div class="tab">
        <div class="form-horizontal">
            <div class="form-group row">
                @Html.Label("From: ", new { @class = "control-label col-md-3" })
                <div class="col-md-5">

                    @Html.DropDownListFor(m => m.selectedFromNb, new SelectList(Model.listFromNb), "select", new { @class = "form-control", id = "fromChosenId", name = "fromname" })
                </div>
            </div>
            <div class="form-group row">
                @Html.Label("To ", new { @class = "control-label col-md-3" })
                <div class="col-md-5">
                    @*<select name="toname" id="toChosenId" class="form-control">
                            <Option value=""></Option>
                        </select>*@
                    @Html.DropDownListFor(m => m.selectedToNb, new SelectList(Model.listToNb), "select", new { @class = "form-control", id = "toChosenId", name = "toname" })
                </div>
            </div>
        </div>
    </div>
    <div class="tab">
        <div class="form-group row">
            @Html.Label("Laboratory ", new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.DropDownListFor(m => m.selectedLabId, new SelectList(Model.Laboratories, "pkLaboratoryId", "LaboratoryName"), "select", new { @class = "form-control", id = "labChosenId", name = "labname" })
            </div>
        </div>

        <div class="form-group row">
            @Html.Label("Specify Collector: ", new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.DropDownListFor(m => m.selectedCollectorId, new SelectList(Model.collectors, "Id", "UserName"), "select", new { @class = "form-control", id = "CollectorChosenId" })
            </div>
        </div>
        <div class="form-group row">
            @Html.Label("From Date: ", new { @class = "control-label col-md-3" })
            <div class="col-md-3">
                @*@Html.TextBoxFor(m => m.StartDate, new { htmlAttributes = new { @class = "form-control form-control-sm", id = "startDateId" } })*@
                @Html.EditorFor(m => m.StartDate, new { htmlAttributes = new { id = "startDateId", @class = "form-control form-control-sm datepicker" } })
            </div>
        </div>
        <div class="form-group row">
            @Html.Label("Due Date: ", new { @class = "control-label col-md-3" })
            <div class="col-md-3">
                @*@Html.EditorFor(m => m.DueDate, new { htmlAttributes = new { @class = "form-control form-control-sm", id = "dueDateId" } })*@
                @Html.EditorFor(m => m.DueDate, new { htmlAttributes = new { id = "dueDateId", @class = "form-control form-control-sm datepicker" } })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="editablePane">
                    <div class="form-group row">
                        @Html.Label("Collector's name ", new { @class = "control-label col-md-3" })
                        <div class="col-md-5">
                            @Html.TextBox("UserName", "", new { @class = "myEditable form-control", id = "fullNameTextId", disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.Label("Email", new { @class = "control-label col-md-3" })
                        <div class="col-md-5">
                            @Html.TextBox("Email", "", new { @class = "myEditable form-control", id = "emailTextId", disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.Label("Phone number", new { @class = "control-label col-md-3" })
                        <div class="col-md-5">
                            @Html.TextBox("PhoneNumber", "", new { @class = "myEditable form-control", id = "phoneNbTextId", disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group row">
                        @Html.Label("Governorate", new { @class = "control-label col-md-3" })
                        <div class="col-md-5">
                            @Html.TextBox("Center", "", new { @class = "myEditable form-control", id = "centerTextId", disabled = "disabled" })
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="editablePane">
                <table class="table-responsive">
                    <tr>
                        <td class="col-md-5">Full Name: </td>

                        <td class="col-md-5">@Html.TextBox("UserName", "", new { @class = "myEditable", id = "fullNameTextId", disabled = "disabled" })</td>
                    </tr>
                    <tr>
                        <td class="col-md-5">Email: </td>
                        <td class="col-md-5">@Html.TextBox("Email", "", new { @class = "myEditable", id = "emailTextId", disabled = "disabled" })</td>
                    </tr>
                    <tr>
                        <td class="col-md-5">Phone number: </td>
                        <td class="col-md-5">@Html.TextBox("PhoneNumber", "", new { @class = "myEditable", id = "phoneNbTextId", disabled = "disabled" })</td>
                    </tr>
                    <tr>
                        <td class="col-md-5">Regional office: </td>
                        <td class="col-md-5">@Html.TextBox("Center", "", new { @class = "myEditable", id = "centerTextId", disabled = "disabled" })</td>
                    </tr>
                </table>
            </div>*@
        </div>
    </div>

    <!-- Circles which indicates the steps of the form: -->
    <div style="text-align:center;margin-top:40px;">
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
    </div>
}
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script>
    $(document).ready(function () {
        $("#startDateId").datepicker(
            {
                showTodayButton: true,
                dateFormat: 'dd-M-yy',
                showClose: true,
                showClear: true,
                toolbarPlacement: 'top',
                stepping: 15,
            });
        $("#dueDateId").datepicker(
            {
                showTodayButton: true,
                dateFormat: 'dd-M-yy',
                showClose: true,
                showClear: true,
                toolbarPlacement: 'top',
                stepping: 15,
            });
    });

    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
        // This function will display the specified tab of the form...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        //... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        //... and run a function that will display the correct step indicator:
        fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n == 1 && !validateForm()) return false;
        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form...
        if (currentTab >= x.length) {
            // ... the form gets submitted:
            document.getElementById("regForm").submit();
            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("select");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {
            // If a field is empty...
            if (y[i].value == "") {
                // add an "invalid" class to the field:
                y[i].className += " invalid";
                // and set the current valid status to false
                valid = false;
            }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class on the current step:
        x[n].className += " active";
    }

    $(function () {
        $("#GovChosenId").change(function () {
            $(this).className = '';
        });
        $("#labChosenId").change(function () {
            $(this).className = '';
        });
        $("#CollectorChosenId").change(function () {
            $(this).className = '';
             var t = $(this).val();
            if (t !== "") {
                $.post("@Url.Action("DisplayCollectorData", "Generate")?val=" + t, function(res) {
                    if (res.Success === "true") {
                        $("#fullNameTextId").prop('disabled', true).val(res.Data.UserName);
                        $("#emailTextId").prop('disabled', true).val(res.Data.Email);
                        $("#phoneNbTextId").prop('disabled', true).val(res.Data.PhoneNumber);
                        $("#centerTextId").prop('disabled', true).val(res.Data.Center);

                    } else {
                        alert("Error getting data!");
                    }
                });
            } else {
                $("input.editableItems").val('').prop('disabled', true);
            }

     });
        });

        $("#CazaChosenId").change(function () {
            $(this).className = '';
            var t = $(this).val();
            var g = $("#GovChosenId").val();
            var p = $("#planChosenId").val();
            if (t !== "" && g !== "") {
                $.post("@Url.Action("DisplaySampleNumbers", "Generate")?govVal=" + g + "&cazaVal=" + t + "&planVal=" + p, function (res) {
                    console.log('t:cazaId: ' + t);
                    console.log('t:govId: ' + g);
                    console.log('t:planId: ' +p);
                    if (res.Success === "true") {
                        $list = res.Data.fromList;
                        var j = $list;
                        var options = '';

                        for (var i = 0; i < j.length; i++) {
                            options += '<option value="' + j[i] + '">' + j[i] + '</option>';
                        }
                        $("#fromChosenId").html(options);
                        $("#toChosenId").html(options);

                    } else {
                        alert("Error getting data!");
                    }
                });
                //} else {
                //    $("input.editableItems").val('').prop('disabled', true);
                //}
            }
        });

</script>

